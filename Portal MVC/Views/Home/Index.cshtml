@using Portal_MVC.Models
@model Portal_MVC.Models.HomeViewModel

@{
    ViewBag.Title = "Select Property - New Estates";


}

@using Syncfusion.EJ2.Navigations;
@using Syncfusion.EJ2.Lists;



@if (Model != null)
{
    if (Model.SelectedProperty.ID == 0)
    {
        <div class="container">
            @Html.Partial("_SelectEstate", Model)
        </div>
    }
    else
    {
        if (Model.NotificationCount > 0)
        {
            for (int i = 1; i <= Model.NotificationCount; i++)
            {
                @Html.EJS().Toast("element").Title($"Unread Notification {i}").Content("You have unread notifications for this property").Position(p => p.X("Right")).Render();
            }

            <p id="ToastDisplayed" style="display: none"></p>


        }

        <div class="Full-Width-Container">
            <div class="row">
                <div class="col-lg-5 col-md-5 col-sm-11 col-xs-11 e-card e-custom-card">
                    @Html.EJS().ListView("listview").Enable(true).DataSource(Model.OwnedProperties).HeaderTitle("Your Properties").ShowHeader(true).ShowIcon(true).Fields(new Syncfusion.EJ2.Lists.ListViewFieldSettings { IconCss = "icon" }).Render()
                </div>
                <div class="col-lg-6 col-md-6 col-sm-11 col-xs-11  e-card e-custom-card">

                    @(Html.EJS().Chart("container").Background("white").Height("200px").Series(series =>
                        {

                        series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Bar).
                            XName("Name").
                            YName("Amount").
                            CornerRadius(cr => cr.BottomLeft(10).BottomRight(10).TopLeft(10).TopRight(10)).

                            Marker(mr => mr.DataLabel(dl => dl.Visible(true).Name("LabelName").

                            Position(Syncfusion.EJ2.Charts.LabelPosition.Bottom).
                            Font(ff => ff.FontWeight("600").Color("#ffffff")))).
                            DataSource(Model.BudgetActualDataList).
                            PointColorMapping("color").
                            Add();
                        }).
                           PrimaryXAxis(px => px.Interval(1)
                                .MajorGridLines(mg => mg.Width(0))
                                .MajorTickLines(mg => mg.Width(0))
                                .LineStyle(mg => mg.Width(0))
                                .ValueType(Syncfusion.EJ2.Charts.ValueType.Category)

                                ).

                           PrimaryYAxis(py => py.Minimum(0).Maximum(Model.XAxisMaxValue)
                                .MajorGridLines(mg => mg.Width(0))
                                .MajorTickLines(mg => mg.Width(0))
                                .LineStyle(mg => mg.Width(0))
                                .LabelStyle(ls => ls.Color("#ffffff"))

                                ).

                           ChartArea(area => area.Border(br => br.Color("transparent"))).
                           LegendSettings(ls => ls.Visible(false)).
                           Title("Overall Fund BVA").
                           TitleStyle(ts => ts.Color("blue")).
                           Render()
                        )

                </div>
            </div>

            <div class="row">
                <div class="col-lg-6 col-md-6 col-sm-11 col-xs-11">
                    @if (string.IsNullOrWhiteSpace(Model.RepairErrorMessage))
                    {
                        <h6>Repairs</h6>
                        @(Html.EJS().Accordion("RepairAccordian").Items(Model.RepairAccordianObjects).ExpandMode(Syncfusion.EJ2.Navigations.ExpandMode.Multiple).Render())
                    }
                    else
                    {
                        <h6>@Model.RepairErrorMessage</h6>
                    }
                </div>
                <div class="col-lg-6 col-md-6 col-sm-11 col-xs-11">
                    <h6>Attendances</h6>
                    @(Html.EJS().Accordion("AttendanceAccordian").Items(Model.AttendanceVisitCollection).ExpandMode(Syncfusion.EJ2.Navigations.ExpandMode.Multiple).Render())
                </div>
            </div>




            <div class="row">
                <div class="col-lg-6 col-md-6 col-sm-11 col-xs-11" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23); padding: 0px; margin-top:15px;">

                    @Html.EJS().TreeView("NotificationsTree").ShowCheckBox(true).AutoCheck(false).NodeChecked("nodeChecked").Fields(field =>
                    field.Id("id").ParentID("pid").Text("name").HasChildren("hasChild").Expanded("expanded")
                    .DataSource(Model.NotificationObjectList)).Render()



                    @*@Html.EJS().ListView("NotificationListView").DataSource(Model.NotificationObjectList).HeaderTitle("Notification Settings").ShowHeader(true).Fields(new ListViewFieldSettings { Text = "text", Id = "id", Tooltip = "text" }).ShowCheckBox(true).Render()*@
                </div>
            </div>



        </div>

        <div class="Full-Width-Container">
           
        </div>

        <div class="Full-Width-Container">
           
        </div>

    }

}



<script>
    function nodeChecked(args) {
        
        
        if (args.data[0].parentID != null) {
            var treeObj = document.getElementById('NotificationsTree');
            var treeObjChildren = treeObj.children[0].children;
            for (var i = 0; i <= treeObjChildren.length - 1; i++)
            {
                //this gets the parent li item
                if (treeObjChildren[i].attributes['data-uid'].value == args.data[0].parentID) {

                    //this is the li
                    var parentObj = treeObjChildren[i];
                    

                    //this is the main container in li
                    var span = parentObj.getElementsByClassName('e-frame');
                    
                    span[0].classList.add('e-check');

                    
                   
                }
                
            }
        }
       
    }
</script>




